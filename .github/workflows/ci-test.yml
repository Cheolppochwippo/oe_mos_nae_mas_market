name: ci test

on:
  push:
    branches: [ main ]
  pull_request:
    branches:
      - dev
      - main

# 권한 설정으로, 내용물을 읽을 수 있는 권한을 부여합니다.
permissions:
  contents: read

#------------------------------------------------
#  PROJECT_NAME: 프로젝트 이름 설정. S3경로 설정에 사용.
#  BUCKET_NAME: 앞에서 생성한 S3 버킷이름
#  CODE_DEPLOY_APP_NAME: CodeDeploy 애플리케이션 이름
#  DEPLOYMENT_GROUP_NAME: CodeDeploy 배포그룹이름
env:
  PROJECT_NAME: oe_mos_nae_mas_market
  BUCKET_NAME: omnmm-bucket
  CODE_DEPLOY_APP_NAME: omnmm-cicd
  DEPLOYMENT_GROUP_NAME: omnmm
#------------------------------------------------

jobs:
  build :
    runs-on: [ ubuntu-latest ]
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      # 코드 체크아웃은 저장소에서 소스코드를 가져와서 현재 작업 디렉토리에 복사하는 작업입니다.
      # 최신 소스 코드를 가져와서 빌드, 테스트, 배포 등의 작업을 진행할 수 있습니다.
      - name: checkout
        uses: actions/checkout@v4

      - name: java setup
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: make executable gradlew
        run: chmod +x ./gradlew
        shell: bash

      # 스프링 프로젝트의 빌드도구인 gradle을 통해 빌드하는 설정입니다.
      - name: Gradle로 빌드
        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
        with:
          arguments: build

      # S3 버킷으로 옮길 zip 파일을 생성합니다.
      - name: ZIP 파일 생성
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash


      # AWS 계정의 서비스 접근 권한을 획득합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_PRIVATE_ACCESS_KEY }}
         aws-region: ap-northeast-2

      # 생성된 zip 파일을 S3에 업로드 합니다.
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      # CodeDeploy에 배포요청을 진행합니다.
      - name: Code Deploy To EC2 instance
        run: aws deploy create-deployment
               --application-name $CODE_DEPLOY_APP_NAME
               --deployment-config-name CodeDeployDefault.AllAtOnce
               --deployment-group-name $DEPLOYMENT_GROUP_NAME
               --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
      # Redis에 연결하여 간단한 명령을 실행합니다.
      - name: Redis 연결 및 테스트
        run: redis-cli -h redis ping
