{"version":3,"file":"static/js/397.044e8f54.chunk.js","mappings":"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","sources":["components/member/LogoutComponent.js","hooks/useCustomLogin.js","../node_modules/jwt-decode/build/esm/index.js","menus/BasicMenu.js","pages/member/LogoutPage.js"],"sourcesContent":["import useCustomLogin from \"../../hooks/useCustomLogin\";\r\n\r\nconst LogoutComponent = () => {\r\n\r\n  const {doLogout, moveToPath} = useCustomLogin()\r\n\r\n  const handleClickLogout = () => {\r\n    localStorage.removeItem(\"jwt\");\r\n    alert(\"로그아웃되었습니다.\")\r\n    moveToPath(\"/\")\r\n  }\r\n\r\n\r\n  return ( \r\n    <div className = \"border-2 border-red-200 mt-10 m-2 p-4\">\r\n      <div className=\"flex justify-center\">\r\n        <div className=\"text-4xl m-4 p-4 font-extrabold text-red-500\">\r\n          Logout \r\n        </div>\r\n      </div> \r\n      <div className=\"flex justify-center\">\r\n        <div className=\"relative mb-4 flex w-full justify-center\">\r\n          <div className=\"w-2/5 p-6 flex justify-center font-bold\">\r\n            <button \r\n              className=\"rounded p-4 w-36 bg-red-500 text-xl  text-white\"\r\n              onClick={handleClickLogout}\r\n              >\r\n              LOGOUT\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    );\r\n}\r\n \r\nexport default LogoutComponent;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Navigate, createSearchParams, useNavigate } from \"react-router-dom\";\r\nimport { loginPostAsync, logout } from \"../slices/loginSlice\";\r\n\r\nconst useCustomLogin = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const exceptionHandle = (ex) => {\r\n    console.log(\"Exception------------------------\");\r\n\r\n    console.log(ex);\r\n\r\n    const errorMsg = ex.response.data.error;\r\n\r\n    const errorStr = createSearchParams({ error: errorMsg }).toString();\r\n\r\n    if (errorMsg === \"REQUIRE_LOGIN\") {\r\n      alert(\"로그인 해야만 합니다.\");\r\n      navigate({ pathname: \"/member/login\", search: errorStr });\r\n\r\n      return;\r\n    }\r\n\r\n    if (ex.response.data.error === \"ERROR_ACCESSDENIED\") {\r\n      alert(\"해당 메뉴를 사용할 수 있는 권한이 없습니다.\");\r\n      navigate({ pathname: \"/member/login\", search: errorStr });\r\n      return;\r\n    }\r\n  };\r\n\r\n  const loginState = useSelector((state) => state.loginSlice); //-------로그인 상태\r\n\r\n  const isLogin = loginState.username ? true : false; //----------로그인 여부\r\n\r\n  const doLogin = async (loginParam) => {\r\n    //----------로그인 함수\r\n\r\n    const action = await dispatch(loginPostAsync(loginParam));\r\n\r\n    return action.payload;\r\n  };\r\n\r\n  const doLogout = () => {\r\n    //---------------로그아웃 함수\r\n\r\n    dispatch(logout());\r\n  };\r\n\r\n  const moveToPath = (path) => {\r\n    //----------------페이지 이동\r\n    navigate({ pathname: path }, { replace: true });\r\n  };\r\n\r\n  const moveToLogin = () => {\r\n    //----------------------로그인 페이지로 이동\r\n    navigate({ pathname: \"/member/login\" }, { replace: true });\r\n  };\r\n\r\n  const moveToLoginReturn = () => {\r\n    //----------------------로그인 페이지로 이동 컴포넌트\r\n    return <Navigate replace to=\"/member/login\" />;\r\n  };\r\n\r\n  return {\r\n    loginState,\r\n    isLogin,\r\n    doLogin,\r\n    doLogout,\r\n    moveToPath,\r\n    moveToLogin,\r\n    moveToLoginReturn,\r\n    exceptionHandle,\r\n  };\r\n};\r\n\r\nexport default useCustomLogin;\r\n","export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n","import { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport logo from \"../img/image.png\"; \r\n\r\nconst BasicMenu = () => {\r\n  const loginState = useSelector((state) => state.loginSlice);\r\n  const jwt = localStorage.getItem(\"jwt\");\r\n  const isLoggedIn = !!jwt;\r\n  const isSeller = isLoggedIn && jwtDecode(jwt).role === \"SELLER\";\r\n\r\n  return (\r\n    <nav id=\"navbar\" className=\"flex bg-blue-300\">\r\n      <div className=\"w-4/5 bg-orange-400\">\r\n        <ul className=\"flex p-4 text-white font-bold\">\r\n          <li className=\"pr-6 text-2xl \">\r\n            <Link to={\"/\"}><img src={logo} alt=\"Logo\" style={{ maxHeight: \"100px\" }} /></Link>\r\n          </li>\r\n          {isLoggedIn ? ( //로그인한 사용자만 출력되는 메뉴\r\n            <>\r\n              <li className=\"pr-6 text-3xl mt-10\">\r\n                <Link to={\"/carts/\"}>Cart</Link>\r\n              </li>\r\n              <li className=\"pr-6 text-3xl mt-10\">\r\n            <Link to={\"/coupons/\"}>Coupons</Link>\r\n          </li>\r\n            </>\r\n            \r\n          ) : (\r\n            <></>\r\n          )}\r\n          {isSeller ? ( //seller만 보이는 메뉴\r\n            <>\r\n              <li className=\"pr-6 text-3xl mt-10\">\r\n                <Link to={\"/store/\"}>Store</Link>\r\n              </li>\r\n            </>\r\n          ) : (\r\n            <></>\r\n          )}\r\n         \r\n          {/* <li className=\"pr-6 text-3xl mt-10\">\r\n            <Link to={\"/totalOrder\"}>Payments</Link>\r\n          </li> */}\r\n        </ul>\r\n      </div>\r\n\r\n      <div className=\"w-1/5 flex justify-end bg-orange-300 p-4 font-medium\">\r\n      {isLoggedIn ? ( \r\n              <li className=\"pr-6 text-3xl mt-10\">\r\n                <Link to={\"/member/mypage\"}>Mypage</Link>\r\n              </li>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        {isLoggedIn ? (\r\n          <div className=\"text-white text-3xl m-1 rounded mt-10\">\r\n            <Link to={\"/member/logout\"}>Logout</Link>\r\n          </div>\r\n        ) : (\r\n          <div className=\"text-white text-3xl m-1 rounded mt-10\">\r\n            <Link to={\"/member/login\"}>Login</Link>\r\n          </div>\r\n        )}\r\n          \r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default BasicMenu;\r\n","import LogoutComponent from \"../../components/member/LogoutComponent\";\r\nimport BasicMenu from \"../../menus/BasicMenu\";\r\n\r\n\r\nconst LogoutPage = () => {\r\n  return ( \r\n    <div className='fixed top-0 left-0 z-[1055] flex flex-col h-full w-full'>\r\n\r\n      <BasicMenu/>\r\n\r\n      <div className=\"w-full flex flex-wrap  h-full justify-center  items-center border-2\">\r\n        <LogoutComponent></LogoutComponent>\r\n      </div>  \r\n    </div>\r\n   );\r\n}\r\n \r\nexport default LogoutPage;\r\n"],"names":["LogoutComponent","doLogout","moveToPath","useCustomLogin","_jsxs","className","children","_jsx","onClick","handleClickLogout","localStorage","removeItem","alert","navigate","useNavigate","dispatch","useDispatch","loginState","useSelector","state","loginSlice","isLogin","username","doLogin","async","loginPostAsync","loginParam","payload","logout","path","pathname","replace","moveToLogin","moveToLoginReturn","Navigate","to","exceptionHandle","ex","console","log","errorMsg","response","data","error","errorStr","createSearchParams","toString","search","InvalidTokenError","Error","base64UrlDecode","str","output","length","decodeURIComponent","atob","m","p","code","charCodeAt","toUpperCase","b64DecodeUnicode","err","prototype","name","BasicMenu","jwt","getItem","isLoggedIn","isSeller","token","options","pos","header","part","split","concat","decoded","e","message","JSON","parse","jwtDecode","role","id","Link","src","logo","alt","style","maxHeight","_Fragment","LogoutPage"],"sourceRoot":""}