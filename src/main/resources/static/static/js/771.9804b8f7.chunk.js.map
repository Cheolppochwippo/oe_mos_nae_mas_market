{"version":3,"file":"static/js/771.9804b8f7.chunk.js","mappings":"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","sources":["api/totalOrderApi.js","components/cart/CartItemComponent.js","components/payment/TotalOrderListComponent.js","pages/payments/TotalOrdersPage.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const API_SERVER_HOST = \"http://localhost:8080\";\r\n\r\nexport const totalOrderAdd = async (totalOrderRequest) => {\r\n  const header = \"Bearer \" +localStorage.getItem('jwt');\r\n  const res = await axios.post(`${API_SERVER_HOST}/totalOrders`, totalOrderRequest, {\r\n    headers: {\r\n      Authorization: header,\r\n    },\r\n  });\r\n  return res.data;\r\n};\r\n\r\nexport const getTotalOrders = async (page) => {\r\n  const header =\"Bearer \" + localStorage.getItem('jwt');\r\n  const res = await axios.get(`${API_SERVER_HOST}/totalOrders`,  {\r\n    headers: {\r\n      Authorization: header,\r\n    }, params: {\r\n      page\r\n    },\r\n  });\r\n  return res.data.data;\r\n};\r\n\r\nexport const getTotalOrder = async (totalOrderId) => {\r\n  const header =\"Bearer \" + localStorage.getItem('jwt');\r\n  const res = await axios.get(`${API_SERVER_HOST}/totalOrders/${totalOrderId}`,  {\r\n    headers: {\r\n      Authorization: header,\r\n    },\r\n  });\r\n  return res.data;\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { getCartItems, updateCartItem, removeFromCart } from '../../api/cartApi';\r\n\r\nconst CartItemComponent = () => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchCartItems = async () => {\r\n      try {\r\n        const data = await getCartItems();\r\n        setCartItems(data.data);\r\n        setTotalPrice(calculateTotalPrice(data.data));\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Failed to fetch cart items:', error);\r\n      }\r\n    };\r\n    fetchCartItems();\r\n  }, []);\r\n\r\n  const calculateTotalPrice = (items) => {\r\n    return items.reduce((total, item) => total + item.price * item.quantity, 0);\r\n  };\r\n\r\n  const handleChangeQuantity = async (orderId, newQuantity) => {\r\n    try {\r\n      await updateCartItem(orderId, newQuantity);\r\n      const updatedCartItems = cartItems.map((item) =>\r\n        item.orderId === orderId ? { ...item, quantity: newQuantity } : item\r\n      );\r\n      setCartItems(updatedCartItems);\r\n      setTotalPrice(calculateTotalPrice(updatedCartItems));\r\n    } catch (error) {\r\n      console.error('Failed to update cart item:', error);\r\n    }\r\n  };\r\n\r\n  const handleRemoveFromCart = async (orderId) => {\r\n    try {\r\n      await removeFromCart(orderId);\r\n      const updatedCartItems = cartItems.filter((item) => item.orderId !== orderId);\r\n      setCartItems(updatedCartItems);\r\n      setTotalPrice(calculateTotalPrice(updatedCartItems));\r\n    } catch (error) {\r\n      console.error('Failed to remove cart item:', error);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>; // 로딩 중일 때 표시할 내용\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-2xl font-bold mb-4\">Cart Items</h2>\r\n      {cartItems.length === 0 ? (\r\n        <p>Your cart is empty.</p>\r\n      ) : (\r\n        <>\r\n          <ul className=\"divide-y divide-gray-200\">\r\n            {cartItems.map((item) => (\r\n              <li key={item.orderId} className=\"py-4 flex items-center\">\r\n                <div className=\"w-2/3 flex items-center\">\r\n                  <div>\r\n                    <p className=\"text-lg font-semibold\">{item.productName}</p>\r\n                    <p className=\"text-gray-600\">Price: {item.price}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"w-1/3 flex justify-end items-center\">\r\n                  <div className=\"flex items-center\">\r\n                    <button\r\n                      className=\"m-1 p-1 text-2xl bg-orange-500 text-white w-8 rounded-lg\"\r\n                      onClick={() => handleChangeQuantity(item.orderId, item.quantity - 1)}\r\n                    >\r\n                      -\r\n                    </button>\r\n                    <span className=\"mx-2\">{item.quantity}</span>\r\n                    <button\r\n                      className=\"m-1 p-1 text-2xl bg-orange-500 text-white w-8 rounded-lg\"\r\n                      onClick={() => handleChangeQuantity(item.orderId, item.quantity + 1)}\r\n                    >\r\n                      +\r\n                    </button>\r\n                  </div>\r\n                  <button\r\n                    className=\"ml-4 text-red-500 hover:text-red-700\"\r\n                    onClick={() => handleRemoveFromCart(item.orderId)}\r\n                  >\r\n                    Remove\r\n                  </button>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <div className=\"mt-8 flex justify-end\">\r\n            <div className=\"text-xlg font-bold \">\r\n              Total Price: {totalPrice.toLocaleString()} 원\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"mt-10 flex justify-end \">\r\n            <button className=\"px-4 py-2 bg-orange-400 text-white rounded-md\">\r\n              주문하기\r\n            </button>\r\n          </div> */}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartItemComponent;","import React, { useEffect, useState } from 'react';\r\nimport { getTotalOrders } from '../../api/totalOrderApi';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./TotalOrderList.css\";\r\n\r\nfunction TotalOrderListComponent() {\r\n  const [totalOrders, setTotalOrders] = useState([]); // 주문 목록을 저장할 상태\r\n  const [currentPage, setCurrentPage] = useState(1); // 현재 페이지 번호 상태\r\n  const [totalPages, setTotalPages] = useState(0); // 전체 페이지 수 상태\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // 페이지가 로드될 때 초기 데이터를 가져오는 함수\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await getTotalOrders(currentPage);\r\n        setTotalOrders(data.content);\r\n        setTotalPages(data.totalPages);\r\n      } catch (error) {\r\n        console.error('Error fetching total orders:', error);\r\n      }\r\n    };\r\n\r\n    fetchData(); // 함수 호출\r\n  }, [currentPage]); // currentPage가 변경될 때마다 실행\r\n\r\n  // 주문 정보를 클릭했을 때 해당 주문 정보를 선택하는 함수\r\n  const handleOrderClick = (order) => {\r\n    try {\r\n      navigate({ pathname: `/totalOrders/${order.id}` }, { replace: true });\r\n    } catch (error) {\r\n      console.error(\"페이지 이동 에러:\", error);\r\n    }\r\n  };\r\n\r\n  // 페이지 버튼들을 렌더링하는 함수\r\n  const renderPageButtons = () => {\r\n    const buttons = [];\r\n    const maxButtons = 10;\r\n    const start = Math.max(1, currentPage - Math.floor(maxButtons / 2));\r\n    const end = Math.min(totalPages, start + maxButtons - 1);\r\n\r\n    for (let i = start; i <= end; i++) {\r\n      buttons.push(\r\n          <button\r\n              key={i}\r\n              className={i === currentPage ? \"active\" : \"\"}\r\n              onClick={() => setCurrentPage(i)}\r\n          >\r\n            {i}\r\n          </button>\r\n      );\r\n    }\r\n\r\n    return buttons;\r\n  };\r\n\r\n  // 이전 페이지로 이동하는 함수\r\n  const goToPrevPage = () => {\r\n    if (currentPage > 1) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n  };\r\n\r\n  // 다음 페이지로 이동하는 함수\r\n  const goToNextPage = () => {\r\n    if (currentPage < totalPages) {\r\n      setCurrentPage(currentPage + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <div className=\"total-orders-container\">\r\n        <h1 className=\"total-orders-heading\">주문 목록</h1>\r\n        <div className=\"order-container\">\r\n          {/* 주문 목록이 비어 있는지 확인하여 조건부 렌더링 */}\r\n          {totalOrders && totalOrders.length > 0 ? (\r\n              totalOrders.map((order) => (\r\n                  <div key={order.id} className=\"order-card\">\r\n                    {/* 각 주문 정보를 카드 형식으로 렌더링 */}\r\n                    <div className=\"order-card-content\">\r\n                      <p className=\"order-name\">주문명: {order.orderName}</p>\r\n                      <p className=\"payment-status\">결제 상태: {order.paymentStatementEnum}</p>\r\n                      <p className=\"payment-amount\">결제 금액: {order.priceAmount} 원</p>\r\n                    </div>\r\n                    <button className=\"order-button\" onClick={() => handleOrderClick(order)}>\r\n                      상세 정보 보기\r\n                    </button>\r\n                  </div>\r\n              ))\r\n          ) : (\r\n              <p className=\"no-orders-message\">주문이 없습니다.</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* 페이지 버튼들 */}\r\n        <div className=\"pagination\">\r\n          {/* 이전 페이지 버튼 */}\r\n          <button className=\"page-button\" onClick={goToPrevPage}>&laquo; 이전</button>\r\n\r\n          {/* 페이지 버튼들 */}\r\n          {renderPageButtons()}\r\n\r\n          {/* 다음 페이지 버튼 */}\r\n          <button className=\"page-button\" onClick={goToNextPage}>다음 &raquo;</button>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default TotalOrderListComponent;\r\n","import CartItemComponent from \"../../components/cart/CartItemComponent\";\r\nimport TotalOrdersComponent from \"../../components/payment/TotalOrderListComponent\"\r\n\r\nconst TotalOrdersPage = () => {\r\n  return (\r\n    \r\n      <div className=\"fixed top-0 left-0 z-[1055] flex flex-col h-full w-full\">\r\n      \r\n          <TotalOrdersComponent />\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default TotalOrdersPage;\r\n"],"names":["API_SERVER_HOST","totalOrderAdd","async","header","localStorage","getItem","axios","post","concat","totalOrderRequest","headers","Authorization","data","getTotalOrders","get","params","page","getTotalOrder","totalOrderId","CartItemComponent","cartItems","setCartItems","useState","loading","setLoading","totalPrice","setTotalPrice","useEffect","getCartItems","calculateTotalPrice","error","console","fetchCartItems","items","reduce","total","item","price","quantity","handleChangeQuantity","orderId","newQuantity","updateCartItem","updatedCartItems","map","_jsx","children","_jsxs","className","length","_Fragment","productName","onClick","removeFromCart","filter","handleRemoveFromCart","toLocaleString","totalOrders","setTotalOrders","currentPage","setCurrentPage","totalPages","setTotalPages","navigate","useNavigate","content","fetchData","order","orderName","paymentStatementEnum","priceAmount","pathname","id","replace","handleOrderClick","goToPrevPage","renderPageButtons","buttons","start","Math","max","floor","maxButtons","end","min","i","push","goToNextPage","TotalOrdersPage","TotalOrdersComponent"],"sourceRoot":""}