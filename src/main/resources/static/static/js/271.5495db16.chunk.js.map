{"version":3,"file":"static/js/271.5495db16.chunk.js","mappings":"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","sources":["api/tosspayment.js","components/payment/PaymentListComponent.js","pages/payments/PaymentsPage.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const API_SERVER_HOST = \"http://localhost:8080\";\r\n\r\nexport const confirmPayment = async (request) => {\r\n  const header = \"Bearer \" +localStorage.getItem('jwt');\r\n  const res = await axios.post(`${API_SERVER_HOST}/payments/confirm`, request, {\r\n    headers: {\r\n      Authorization: header,\r\n    },\r\n  });\r\n  return res.data;\r\n};\r\n\r\nexport const cancelPayment = async (request) => {\r\n  const header = \"Bearer \" +localStorage.getItem('jwt');\r\n  const res = await axios.post(`${API_SERVER_HOST}/payments/cancel`, request, {\r\n    headers: {\r\n      Authorization: header,\r\n    },\r\n  });\r\n  return res.data;\r\n};\r\n\r\nexport const getPayments = async (page) => {\r\n  const header = \"Bearer \" +localStorage.getItem('jwt');\r\n  const res = await axios.get(`${API_SERVER_HOST}/payments`,  {\r\n    headers: {\r\n      Authorization: header,\r\n    }, params: {\r\n      page\r\n    },\r\n  });\r\n  return res.data.data;\r\n};\r\n\r\nexport const getPayment = async (productId) => {\r\n  const header = \"Bearer \" +localStorage.getItem('jwt');\r\n  const res = await axios.get(`${API_SERVER_HOST}/payments/${productId}`,  {\r\n    headers: {\r\n      Authorization: header,\r\n    },\r\n  });\r\n  return res.data;\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { getPayments } from '../../api/tosspayment'; // getPayments 함수 가져오기\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./PaymentList.css\"\r\n\r\nfunction PaymentListPageComponent() {\r\n  const [payments, setPayments] = useState([]); // 결제 목록을 저장할 상태\r\n  const [selectedPayment, setSelectedPayment] = useState(null); // 선택된 결제 정보 상태\r\n  const [currentPage, setCurrentPage] = useState(1); // 현재 페이지 번호 상태\r\n  const [totalPages, setTotalPages] = useState(0); // 전체 페이지 수 상태\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // 페이지가 로드될 때 초기 데이터를 가져오는 함수\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await getPayments(currentPage);\r\n        setPayments(data.content);\r\n        setTotalPages(data.totalPages);\r\n      } catch (error) {\r\n        console.error('Error fetching payments:', error);\r\n      }\r\n    };\r\n\r\n    fetchData(); // 함수 호출\r\n  }, [currentPage]); // currentPage가 변경될 때마다 실행\r\n\r\n  // 결제 정보를 클릭했을 때 해당 결제 정보를 선택하는 함수\r\n  const handlePaymentClick = (payment) => {\r\n    try {\r\n      navigate({ pathname: `/payments/${payment.id}` }, { replace: true });\r\n    } catch (error) {\r\n      console.error(\"Error while adding order:\", error);\r\n    }\r\n  };\r\n\r\n  // 페이지 버튼들을 렌더링하는 함수\r\n  const renderPageButtons = () => {\r\n    const buttons = [];\r\n    const maxButtons = 10;\r\n    const start = Math.max(1, currentPage - Math.floor(maxButtons / 2));\r\n    const end = Math.min(totalPages, start + maxButtons - 1);\r\n\r\n    for (let i = start; i <= end; i++) {\r\n      buttons.push(\r\n          <button\r\n              key={i}\r\n              className={i === currentPage ? \"active\" : \"\"}\r\n              onClick={() => setCurrentPage(i)}\r\n          >\r\n            {i}\r\n          </button>\r\n      );\r\n    }\r\n\r\n    return buttons;\r\n  };\r\n\r\n  // 이전 페이지로 이동하는 함수\r\n  const goToPrevPage = () => {\r\n    if (currentPage > 1) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n  };\r\n\r\n  // 다음 페이지로 이동하는 함수\r\n  const goToNextPage = () => {\r\n    if (currentPage < totalPages) {\r\n      setCurrentPage(currentPage + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <div>\r\n        <h1>결제 목록</h1>\r\n        <div className=\"payment-container\">\r\n          {/* 결제 목록이 비어 있는지 확인하여 조건부 렌더링 */}\r\n          {payments && payments.length > 0 && payments.map((payment) => (\r\n              <div key={payment.id} className=\"payment-card\">\r\n                {/* 각 결제 정보를 카드 형식으로 렌더링 */}\r\n                <div className=\"payment-content\">\r\n                  <p>주문명: {payment.orderName}</p>\r\n                  <p>주문 상태: {payment.statement}</p>\r\n                  <p>결제 금액: {payment.amount} 원</p>\r\n                </div>\r\n                <button className=\"payment-button\" onClick={() => handlePaymentClick(payment)}>\r\n                  상세 정보 보기\r\n                </button>\r\n              </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* 페이지 버튼들 */}\r\n        <div className=\"pagination\">\r\n          {/* 이전 페이지 버튼 */}\r\n          <button onClick={goToPrevPage}>&laquo;</button>\r\n\r\n          {/* 페이지 버튼들 */}\r\n          {renderPageButtons()}\r\n\r\n          {/* 다음 페이지 버튼 */}\r\n          <button onClick={goToNextPage}>&raquo;</button>\r\n        </div>\r\n\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default PaymentListPageComponent;\r\n","import PaymentsPageComponent from \"../../components/payment/PaymentListComponent\";\r\n\r\nconst PaymentsPage = () => {\r\n  return (\r\n      <div className=\"fixed top-0 left-0 z-[1055] flex flex-col h-full w-full\">\r\n        <div className=\"w-full flex flex-wrap h-full justify-center items-center border-2\">\r\n          <PaymentsPageComponent />\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default PaymentsPage;\r\n"],"names":["API_SERVER_HOST","confirmPayment","async","header","localStorage","getItem","axios","post","concat","request","headers","Authorization","data","cancelPayment","getPayments","get","params","page","getPayment","productId","payments","setPayments","useState","selectedPayment","setSelectedPayment","currentPage","setCurrentPage","totalPages","setTotalPages","navigate","useNavigate","useEffect","content","error","console","fetchData","_jsxs","children","_jsx","className","length","map","payment","orderName","statement","amount","onClick","pathname","id","replace","handlePaymentClick","goToPrevPage","renderPageButtons","buttons","start","Math","max","floor","maxButtons","end","min","i","push","goToNextPage","PaymentsPage","PaymentsPageComponent"],"sourceRoot":""}