{"version":3,"file":"static/js/866.c1f6b9c5.chunk.js","mappings":"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","sources":["hooks/useCustomLogin.js","../node_modules/jwt-decode/build/esm/index.js","menus/BasicMenu.js","components/member/LoginComponent.js","pages/member/LoginPage.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Navigate, createSearchParams, useNavigate } from \"react-router-dom\";\r\nimport { loginPostAsync, logout } from \"../slices/loginSlice\";\r\n\r\nconst useCustomLogin = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const exceptionHandle = (ex) => {\r\n    console.log(\"Exception------------------------\");\r\n\r\n    console.log(ex);\r\n\r\n    const errorMsg = ex.response.data.error;\r\n\r\n    const errorStr = createSearchParams({ error: errorMsg }).toString();\r\n\r\n    if (errorMsg === \"REQUIRE_LOGIN\") {\r\n      alert(\"로그인 해야만 합니다.\");\r\n      navigate({ pathname: \"/member/login\", search: errorStr });\r\n\r\n      return;\r\n    }\r\n\r\n    if (ex.response.data.error === \"ERROR_ACCESSDENIED\") {\r\n      alert(\"해당 메뉴를 사용할 수 있는 권한이 없습니다.\");\r\n      navigate({ pathname: \"/member/login\", search: errorStr });\r\n      return;\r\n    }\r\n  };\r\n\r\n  const loginState = useSelector((state) => state.loginSlice); //-------로그인 상태\r\n\r\n  const isLogin = loginState.username ? true : false; //----------로그인 여부\r\n\r\n  const doLogin = async (loginParam) => {\r\n    //----------로그인 함수\r\n\r\n    const action = await dispatch(loginPostAsync(loginParam));\r\n\r\n    return action.payload;\r\n  };\r\n\r\n  const doLogout = () => {\r\n    //---------------로그아웃 함수\r\n\r\n    dispatch(logout());\r\n  };\r\n\r\n  const moveToPath = (path) => {\r\n    //----------------페이지 이동\r\n    navigate({ pathname: path }, { replace: true });\r\n  };\r\n\r\n  const moveToLogin = () => {\r\n    //----------------------로그인 페이지로 이동\r\n    navigate({ pathname: \"/member/login\" }, { replace: true });\r\n  };\r\n\r\n  const moveToLoginReturn = () => {\r\n    //----------------------로그인 페이지로 이동 컴포넌트\r\n    return <Navigate replace to=\"/member/login\" />;\r\n  };\r\n\r\n  return {\r\n    loginState,\r\n    isLogin,\r\n    doLogin,\r\n    doLogout,\r\n    moveToPath,\r\n    moveToLogin,\r\n    moveToLoginReturn,\r\n    exceptionHandle,\r\n  };\r\n};\r\n\r\nexport default useCustomLogin;\r\n","export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n","import { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport logo from \"../img/image.png\"; \r\n\r\nconst BasicMenu = () => {\r\n  const loginState = useSelector((state) => state.loginSlice);\r\n  const jwt = localStorage.getItem(\"jwt\");\r\n  const isLoggedIn = !!jwt;\r\n  const isSeller = isLoggedIn && jwtDecode(jwt).role === \"SELLER\";\r\n\r\n  return (\r\n    <nav id=\"navbar\" className=\"flex bg-blue-300\">\r\n      <div className=\"w-4/5 bg-orange-400\">\r\n        <ul className=\"flex p-4 text-white font-bold\">\r\n          <li className=\"pr-6 text-2xl \">\r\n            <Link to={\"/\"}><img src={logo} alt=\"Logo\" style={{ maxHeight: \"100px\" }} /></Link>\r\n          </li>\r\n          {isLoggedIn ? ( //로그인한 사용자만 출력되는 메뉴\r\n            <>\r\n              <li className=\"pr-6 text-3xl mt-10\">\r\n                <Link to={\"/carts/\"}>Cart</Link>\r\n              </li>\r\n              <li className=\"pr-6 text-3xl mt-10\">\r\n            <Link to={\"/coupons/\"}>Coupons</Link>\r\n          </li>\r\n            </>\r\n            \r\n          ) : (\r\n            <></>\r\n          )}\r\n          {isSeller ? ( //seller만 보이는 메뉴\r\n            <>\r\n              <li className=\"pr-6 text-3xl mt-10\">\r\n                <Link to={\"/store/\"}>Store</Link>\r\n              </li>\r\n            </>\r\n          ) : (\r\n            <></>\r\n          )}\r\n         \r\n          {/* <li className=\"pr-6 text-3xl mt-10\">\r\n            <Link to={\"/totalOrder\"}>Payments</Link>\r\n          </li> */}\r\n        </ul>\r\n      </div>\r\n\r\n      <div className=\"w-1/5 flex justify-end bg-orange-300 p-4 font-medium\">\r\n      {isLoggedIn ? ( \r\n              <li className=\"pr-6 text-3xl mt-10\">\r\n                <Link to={\"/member/mypage\"}>Mypage</Link>\r\n              </li>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        {isLoggedIn ? (\r\n          <div className=\"text-white text-3xl m-1 rounded mt-10\">\r\n            <Link to={\"/member/logout\"}>Logout</Link>\r\n          </div>\r\n        ) : (\r\n          <div className=\"text-white text-3xl m-1 rounded mt-10\">\r\n            <Link to={\"/member/login\"}>Login</Link>\r\n          </div>\r\n        )}\r\n          \r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default BasicMenu;\r\n","import { useState } from \"react\";\r\nimport useCustomLogin from \"../../hooks/useCustomLogin\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\n\r\nconst initState = { username: '', pw: '' };\r\n\r\nconst LoginComponent = () => {\r\n  const [loginParam, setLoginParam] = useState({ ...initState });\r\n  const { doLogin, moveToPath } = useCustomLogin();\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (e) => {\r\n    loginParam[e.target.name] = e.target.value;\r\n    setLoginParam({ ...loginParam });\r\n  };\r\n\r\n  const handleClickLogin = (e) => {\r\n    doLogin(loginParam)\r\n      .then(data => {\r\n        console.log(data);\r\n        if (data.error) {\r\n          alert(\"아이디와 패스워드를 다시 확인하세요\");\r\n        } else {\r\n          alert(\"로그인 성공\");\r\n          moveToPath('/');\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleClickSignUp = () => {\r\n    navigate('/member/signup');\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-xl mx-auto my-10 p-6 border border-gray-300 rounded-lg\">\r\n      <h2 className=\"text-2xl font-bold mb-6 text-center\">로그인</h2>\r\n      <div className=\"mb-4 px-6\">\r\n        <input\r\n          className=\"w-full p-2 border border-gray-300 rounded\"\r\n          name=\"username\"\r\n          type=\"text\"\r\n          value={loginParam.username}\r\n          onChange={handleChange}\r\n          placeholder=\"아이디를 입력해주세요\"\r\n        />\r\n      </div>\r\n      <div className=\"mb-4 px-6 \">\r\n        <input\r\n          className=\"w-full p-2 border border-gray-300 rounded\"\r\n          name=\"pw\"\r\n          type=\"password\"\r\n          value={loginParam.pw}\r\n          onChange={handleChange}\r\n          placeholder=\"비밀번호를 입력해주세요\"\r\n        />\r\n      </div>\r\n      \r\n      <div className=\"flex justify-between items-center  px-6 mb-4\">\r\n        <button\r\n          className=\"w-full py-2  bg-purple-600 text-white rounded hover:bg-purple-700\"\r\n          onClick={handleClickLogin}\r\n        >\r\n          로그인\r\n        </button>\r\n        </div>\r\n        <div className=\"flex px-6 justify-between  items-center mb-4\">\r\n        <button\r\n        className=\"w-full py-2 bg-gray-200 text-gray-700 rounded hover:bg-purple-700\"\r\n          onClick={handleClickSignUp}\r\n        >\r\n          회원가입\r\n        </button>\r\n        </div>\r\n        </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default LoginComponent;","import LoginComponent from \"../../components/member/LoginComponent\";\r\nimport BasicMenu from \"../../menus/BasicMenu\";\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <div className=\"fixed top-0 left-0 z-[1055] flex flex-col h-full w-full\">\r\n      <BasicMenu />\r\n      <div className=\"w-full flex flex-wrap h-full justify-center items-center border-2\">\r\n        <div className=\"max-w-xl w-full px-4\">\r\n          {/* 여기에 LoginComponent를 포함하고, 크기 및 스타일을 조정할 수 있습니다 */}\r\n          <LoginComponent />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"names":["useCustomLogin","navigate","useNavigate","dispatch","useDispatch","loginState","useSelector","state","loginSlice","isLogin","username","doLogin","async","loginPostAsync","loginParam","payload","doLogout","logout","moveToPath","path","pathname","replace","moveToLogin","moveToLoginReturn","_jsx","Navigate","to","exceptionHandle","ex","console","log","errorMsg","response","data","error","errorStr","createSearchParams","toString","alert","search","InvalidTokenError","Error","base64UrlDecode","str","output","length","decodeURIComponent","atob","m","p","code","charCodeAt","toUpperCase","b64DecodeUnicode","err","prototype","name","BasicMenu","jwt","localStorage","getItem","isLoggedIn","isSeller","token","options","pos","header","part","split","concat","decoded","e","message","JSON","parse","jwtDecode","role","_jsxs","id","className","children","Link","src","logo","alt","style","maxHeight","_Fragment","initState","pw","LoginComponent","setLoginParam","useState","handleChange","target","value","type","onChange","placeholder","onClick","then","handleClickSignUp","LoginPage"],"sourceRoot":""}